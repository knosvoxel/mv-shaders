// MIT License (MIT)
// Copyright (c) 2023 Niklas MÃ¤ckle
//
// xs_begin
// author : '@knosvoxel'
// arg : { name = 'Threshold' var = 'm_threshold' range = '0 1' value = '0.5' step = '0.01' precision = '0' decimal = '3' }
// arg : { name = 'Seed' var = 'm_seed' range = '0 1000000' value = '42' step = '1' precision = '0' }
// xs_end

float x,y,z;
float seed = m_seed;
float threshold = m_threshold;

float PHI = 1.61803398874989484820459;

float random(vec2 xy)
{
    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);
}

float map(vec3 v){
    float index = voxel(v);
    x = v.x;
    y = v.y;
    z = v.z;

    if (index == 0.0){
        float index_above = voxel(vec3(x,y,z+1));
        float index_below = voxel(vec3(x,y,z-1));
        if (index_above == 0.0 && index_below != 0.0){
                if(random(vec2(x,y)) >= threshold){
                    return iColorIndex;
                
            }
            return index;
        }

        return index;
    }

    return index;
}