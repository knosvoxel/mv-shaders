// MIT License (MIT)
// Copyright (c) 2023 Niklas MÃ¤ckle
//
// xs_begin
// author : '@knosvoxel'
// arg : { name = 'Mode' var = 'm_mode' range = '1 8' value = '1' step = '1' precision = '1'}
// arg : { name = 'Threshold' var = 'm_threshold' range = '0 1' value = '0.5' step = '0.01' precision = '0' decimal = '3' }
// arg : { name = 'Seed' var = 'm_seed' range = '0 1000000' value = '42' step = '1' precision = '0' }
// xs_end

float x,y,z;
float seed = m_seed;
float threshold = m_threshold;
int mode = int(m_mode);

float PHI = 1.61803398874989484820459;

vec2 modes[8] = {{-1, 0},
                {-1, -1},
                {0, -1},
                {1, -1},
                {1, 0},
                {1, 1},
                {0, 1},
                {-1, 1}};

float random(vec2 xy)
{
    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);
}

bool checkDir(vec3 v, vec2 mode)
{
    float index = voxel(vec3(v.x + mode.x, v.y + mode.y, z - 1));
    float index_flat = voxel(vec3(v.x + mode.x, v.y + mode.y, z));

    if(index == iColorIndex && index_flat == 0.0){
        return true;
    }

    return false;
}

float map(vec3 v){
    float index = voxel(v);
    x = v.x;
    y = v.y;
    z = v.z;

    if (index == 0.0){
        float index_above = voxel(vec3(x,y,z+1));
        float index_below = voxel(vec3(x,y,z+1));

        if (index_above == 0.0){
            if(checkDir(v, modes[mode - 1])){
                if(random(vec2(x,y)) >= threshold){
                    return iColorIndex;
                }
            }
            
            return index;
        }

        return index;
    }

    return index;
}